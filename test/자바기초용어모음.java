package test;

/*
public class 자바기초용어모음
    // 접근 제한자
        public: 모든 클래스에서 접근 가능한 가장 큰 범위

    protected: 같은 패키지 내에서도 접근할 수 있고 다른패키지라면 상속 되어있는
                하위 클래스에서 선언 가능

    default: 같은 패키지 내에서 접근이 가능하고 아무 접근제한자를 선언하지 않았다면
            default 가 생랻 되어 있다

    private 선언한 해당 클래스 내에서만 접근 할 수 있는 가장 최소 단위

    // static
    static 변수: 인스턴스화 되지 않고 사용되며 클래스 자체에 속한다 클래스 이름으로 호출

    static 메서드: 인스턴스화 되지 않고 사용되며 클래스 이름으로 호출되고 정적 메서드 이기 때문에
                    클래스에서 할 수 있는 일을 한다




    // final
    final 변수: 생성과 동시에 초기화를 해주어야 하며 값이 더 이상 변하지 않는다

  final 메서드: 상속 받은 클래스에서는 오버라이드 할 수 없다

  final 클래스: 상속이 되지 않는 클래스



    // super VS this
        this: 클래스 내의 객체 그 자체를 나타내는 키워드 클래스 내에서 생성자를
              생성할 때 클래스 객체를 참조 할 때 사용

        super: 상속관계에 있을때 자식 클래스가 부모 클래스의 필드 나 메서드를 사용할 때 사용

    // 오버로딩 VS 오버라이딩
    오버로딩: 한 클래스 내에서 같은 메서드를 반복할 때 재정의 해서 사용하는것

    오버라이딩: 상속관계에서 자식 클래스가 부모클래스의 메서드를 재정의 해서 사용하는 것


    // abstract
    abstract 클래스: 하나 이상의 추상 메서드를 꼭 작성 해야하는 클래스

    abstract 메서드: 메서드의 선언부만 작성하고 구현부는 상속받는 자식 클래스에서 강제로 구현하게 하는 것




    // interface VS abstract class
    interface: 추상 메서드와 상수만 있는 클래스이고 일반 메서드와 static 메서드는 접근 제한자를 꼭 붙여주어야 한다
                다중 상속이 가능



    abstract class: 하나 이상의 추상메서드가 있어야하며 일반 메서드와 static 메서드를 다 사용할 수 있다
                    다중 상속이 불가능

     (기능을 분리 interface: 필요할 수 있는 메서드를 구현해서 필요한 클래스에 사용
             abstract class: 꼭 필요한 동작을 구현해서 상속받는 모든 클래스에서 무조건 정의하게 끔 사용)


    // extends VS implements
    extends: 클래스 or 클래스 인터페이스 or 인터페이스 끼리 확장할 때 사용
    implements: 클래스가 인터페이스를 구현할 때 사용


    // try-catch-finally
    try: 예외코드가 있을거 같을때 작성

    catch: 예외가 발생하면 에러를 잡을 때 사용

    catch: 예외코드와 상관없이 반드시 실행되어야 하는 코드가 있을 때 사용


*/


